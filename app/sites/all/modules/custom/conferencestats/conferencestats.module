<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_help().
 */
function conferencestats_help($path, $arg) {
  switch ($path) {
    case 'admin/help#conferencestats':
      $output = '';
      $output .= '<p>' . t('Conference statistics') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function conferencestats_permission() {
  return array(
    'administer conferencestats' => array(
      'title' => t('administer conferencestatsn'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function conferencestats_menu() {
  $items = array();
  // Placeholder for application project page.
  $items['admin/application/conferencestats-settings'] = array(
    'title' => 'Conference stats settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('conferencestats_admin_form'),
    'file' => 'conferencestats.admin.inc',
    'access arguments' => array('administer conferencestats'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
  );
  return $items;
}


/**
 * Social links in header of page.
 *
 * @return
 *   HTML output.
 */
function conferencestats_header_bar() {
  $output = '';
  $attendees = conferencestats_get_attendees_count();
  $days_left = conferencestats_get_day_left();
  $sessions = conferencestats_get_sessions_count();
  $output .= '<ul>';
  $output .= '<li>' . l(t('Attendees') . ' : <span>' . $attendees . '</span>', 'attendees', array('html' => TRUE)) . '</li>';

  $timestamp_now = REQUEST_TIME;
  $timestamp_voting_end = strtotime(variable_get('session_voting_end_date', '2016-05-15'));

  if ($timestamp_now > $timestamp_voting_end) {
    $output .= '<li>' . l(t('Sessions : <span>' . $sessions . '</span>'), variable_get('conferencestats_node_accepted', 'node/70'), array('html' => TRUE)) . '</li>';
  }
  else {
    $output .= '<li>' . l(t('Sessions') . ' : <span>' . $sessions . '</span>', 'sessions/proposed', array('html' => TRUE)) . '</li>';
  }

  if ($days_left) {
    $output .= '<li>' . t('Time left') . ': <span>' . $days_left . '</span> ' . t('days') . '</li>';
  }
  $output .= '</ul>';

  return $output;
}

/**
 * Get number of attendees.
 */
function conferencestats_get_attendees_count() {
  $query = db_select('users', 'u');
  $query->fields('u');
  $query->condition('uid', '1', '>');
  $query->condition('status', '1');
  $result = $query->execute();
  return sprintf("%02s", $result->rowCount());
}

/**
 * Get days left.
 */
function conferencestats_get_day_left() {
  $today = date('m/d/Y');
  $today = strtotime($today);
  $finish = variable_get('conferencestats_start_date', '2015-05-29');
  $finish = strtotime($finish);

  $diff = $finish - $today;
  if ($diff > 0) {
    $daysleft = floor($diff / (60 * 60 * 24));
  }
  else {
    $daysleft = NULL;
  }
  return $daysleft;
}

/**
 * Get number of sessions.
 * @TODO - only accepted sessions.
 */
function conferencestats_get_sessions_count() {
  $query = db_select('node', 'n');
  $query->fields('n');
  $query->join('field_data_field_session_status', 'f', 'f.entity_id = n.nid');
  $query->condition('type', 'session');
  $query->condition('status', '1');

  $timestamp_now = REQUEST_TIME;
  $timestamp_voting_end = strtotime(variable_get('session_voting_end_date', '2015-05-15'));

  if ($timestamp_now > $timestamp_voting_end) {
    $query->condition('field_session_status_value', '1'); // 1|Accepted
  }
  else {
    $query->condition('field_session_status_value', '0'); // 0|Unprocessed
  }

  $result = $query->execute();
  return sprintf("%02s", $result->rowCount());
}
